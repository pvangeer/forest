<fluent:RibbonWindow 
    x:Class="StoryTree.Gui.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:fluent="urn:fluent-ribbon"
    xmlns:converters="clr-namespace:StoryTree.Gui.Converters"
    xmlns:viewModels="clr-namespace:StoryTree.Gui.ViewModels"
    xmlns:dataTemplates="clr-namespace:StoryTree.Gui.DataTemplates"
    xmlns:gui="clr-namespace:StoryTree.Gui"
    Title="Gebeurtenissenboom" 
    Height="600" 
    Width="900" 
    x:Name="MainRibbonWindow">
    <Window.DataContext>
        <viewModels:GuiViewModel />
    </Window.DataContext>
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Fluent;Component/Themes/generic.xaml"/>
                <ResourceDictionary Source="/DataTemplates/GeneralInformationDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/ExpertsDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/EstimationDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/HydraulicsDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/EventTreesDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/TreeEventsDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/EventTreeGalleryItemDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/ResultsDataTemplate.xaml"/>
                <ResourceDictionary Source="/DataTemplates/MessageDataTemplates.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <converters:TabItemToTemplateConverter x:Key="TabItemToTemplateConverter" 
                                                   GeneralDataTemplate="{StaticResource GeneralInformationDataTemplate}"
                                                   ExpertsTemplate ="{StaticResource ExpertsDataTemplate}"
                                                   EstimationTemplate="{StaticResource EstimationDataTemplate}"
                                                   HydraulicsTemplate="{StaticResource HydraulicsDataTemplate}"
                                                   EventsTemplate="{StaticResource EventTreesDataTemplate}"
                                                   TreeEventsTemplate="{StaticResource TreeEventsTemplate}"
                                                   ResultsTemplate="{StaticResource ResultsDataTemplate}"/>

            <Style x:Key="Spinner" TargetType="Image">
                <Setter Property="Height" Value="24" />
                <Setter Property="Image.RenderTransform">
                    <Setter.Value>
                        <RotateTransform CenterX="12" CenterY="12" />
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetProperty="RenderTransform.Angle"
                                        From="0"
                                        To="360"
                                        Duration="0:0:1"
                                        RepeatBehavior="Forever" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <converters:EventTreesToCountConverter x:Key="EventTreesToCountConverter" />
            <converters:BusyIndicatorToEnabledConverter x:Key="BusyIndicatorToEnabledConverter" />
            <gui:ShouldShowLastErrorConverter x:Key="ShouldShowLastErrorConverter" />
            <gui:MessageListToLabelConverter x:Key="MessageListToLabelConverter" />
        </ResourceDictionary>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Close"
                        Executed="CloseCommandHandler"/>
    </Window.CommandBindings>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <fluent:Ribbon 
            IsEnabled="{Binding BusyIndicator, Converter={StaticResource BusyIndicatorToEnabledConverter}}"
            Focusable="True" 
            x:Name="Ribbon" 
            x:FieldModifier="protected">
            <!--Backstage-->
            <fluent:Ribbon.Menu>
                <fluent:Backstage Background="#008fc5">
                    <fluent:BackstageTabControl>
                        <fluent:Button Header="Nieuw bestand"
                                       Icon="/Core.Common.Gui;component\Resources\DocumentHS.png"
                                       fluent:KeyTip.Keys="N"
                                       Command="{Binding FileNewCommand}"/>

                        <fluent:Button Header="Opslaan"
                                       Icon="/Core.Common.Gui;component\Resources\saveHS.png"
                                       fluent:KeyTip.Keys="S"
                                       Command="{Binding SaveProjectCommand}"/>

                        <fluent:Button Header="Opslaan Als"
                                       Icon="/Core.Common.Gui;component\Resources\SaveAsHH.png"
                                       fluent:KeyTip.Keys="A" 
                                       Command="{Binding SaveProjectAsCommand}"/>

                        <fluent:Button Header="Openen"
                                       Icon="/Core.Common.Gui;component\Resources\openfolderHS.png"
                                       fluent:KeyTip.Keys="O"
                                       Command ="{Binding OpenProjectCommand}"/>

                        <fluent:SeparatorTabItem />

                        <fluent:Button Header="Afsluiten"
                                       Icon="/Core.Common.Gui;component\Resources\ClosePreviewHH.png"
                                       fluent:KeyTip.Keys="X"
                                       Command="ApplicationCommands.Close"/>

                    </fluent:BackstageTabControl>
                </fluent:Backstage>
            </fluent:Ribbon.Menu>

            <fluent:Ribbon.ContextualGroups>
                <fluent:RibbonContextualTabGroup 
                    Name="GeneralInformationGroup" 
                    Header="Algemeen" 
                    Visibility="Visible" 
                    Background="CornflowerBlue" 
                    BorderBrush="DodgerBlue"/>
                <fluent:RibbonContextualTabGroup 
                    Name="EventTreesGroup" 
                    Header="Gebeurtenissen" 
                    Visibility="Visible" 
                    Background="DarkSeaGreen" 
                    BorderBrush="ForestGreen"/>
                <fluent:RibbonContextualTabGroup 
                    Name="EstimationGroup" 
                    Header="Overgangskansen" 
                    Visibility="Visible" 
                    Background="Pink" 
                    BorderBrush="HotPink"/>
                <fluent:RibbonContextualTabGroup 
                    Name="ResultsGroup" 
                    Header="Resultaten" 
                    Visibility="Visible" 
                    Background="BlueViolet" 
                    BorderBrush="Purple"/>
            </fluent:Ribbon.ContextualGroups>

            <!-- Start -->
            <fluent:RibbonTabItem 
                Name="GeneralDataTabItem" 
                Header="Projectgegevens" 
                fluent:KeyTip.Keys="S" 
                Group="{Binding Source={x:Reference GeneralInformationGroup}}"/>

            <fluent:RibbonTabItem 
                Name="ExpertsTabItem" 
                Header="Experts" 
                fluent:KeyTip.Keys="V"  
                Group="{Binding Source={x:Reference GeneralInformationGroup}}"/>

            <fluent:RibbonTabItem
                Name="HydraulicsTabItem"
                Header="Hydraulische gegevens"
                Group="{Binding Source={x:Reference GeneralInformationGroup}}"/>

            <fluent:RibbonTabItem
                Name="EventsTabItem"
                Header="Gebeurtenissen"
                Group="{Binding Source={x:Reference EventTreesGroup}}">
                <fluent:RibbonGroupBox Header="Gebeurtenissen">
                    <fluent:Button Header="Gebeurtenis toevoegen" Size="Large" Command="{Binding ProjectViewModel.AddEventTreeCommand}" />
                    <fluent:Button Header="Gebeurtenis verwijderen" Size="Large" Command="{Binding ProjectViewModel.RemoveEventTreeCommand}" />
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem
                Name="TreeEventsTabItem"
                Header="Faalpaden"
                Group="{Binding Source={x:Reference EventTreesGroup}}">
                <fluent:RibbonGroupBox Header="Gebeurtenissen">
                    <fluent:InRibbonGallery 
                        ItemsSource="{Binding ProjectViewModel.EventTrees}" 
                        SelectedItem="{Binding ProjectViewModel.SelectedEventTree, UpdateSourceTrigger=PropertyChanged}"
                        ItemTemplate="{DynamicResource GalleryItemTemplate}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Knopen">
                    <fluent:Button Header="Knoop toevoegen" Size="Large" Command="{Binding ProjectViewModel.AddTreeEventCommand}" />
                    <fluent:Button Header="Knoop verwijderen" Size="Large" Command="{Binding ProjectViewModel.RemoveTreeEventCommand}" />
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem 
                Name="EstimationTabItem" 
                Header="Overgangskansen"
                Group="{Binding Source={x:Reference EstimationGroup}}">
                <fluent:RibbonGroupBox Header="Gebeurtenissen">
                    <fluent:InRibbonGallery 
                        ItemsSource="{Binding ProjectViewModel.EventTrees}" 
                        SelectedItem="{Binding ProjectViewModel.SelectedEventTree, UpdateSourceTrigger=PropertyChanged}"
                        ItemTemplate="{DynamicResource GalleryItemTemplate}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem
                Name="ResultsTabItem"
                Header="Resultaten"
                Group="{Binding Source={x:Reference ResultsGroup}}">
                <fluent:RibbonGroupBox Header="Gebeurtenissen">
                    <fluent:InRibbonGallery 
                        ItemsSource="{Binding ProjectViewModel.EventTrees}" 
                        SelectedItem="{Binding ProjectViewModel.SelectedEventTree, UpdateSourceTrigger=PropertyChanged}"
                        ItemTemplate="{DynamicResource GalleryItemTemplate}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
        </fluent:Ribbon>

        <ContentPresenter 
            IsEnabled="{Binding BusyIndicator, Converter={StaticResource BusyIndicatorToEnabledConverter}}"
            Name="HostControl" 
            Grid.Row="1" 
            Content="{Binding ProjectViewModel}" 
            ContentTemplate="{
                Binding ElementName=Ribbon, 
                Path=SelectedTabItem, 
                Converter={StaticResource TabItemToTemplateConverter}, 
                ConverterParameter={RelativeSource Self}
            }"/>
        
        <fluent:StatusBar Grid.Row="2">
            <fluent:StatusBar.Resources>
                <dataTemplates:BusyIconTemplateSelector x:Key="BusyIconTemplateSelector" />
            </fluent:StatusBar.Resources>
            <fluent:StatusBarItem HorizontalAlignment="Left">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/StoryTree.Gui;component/Resources/EventTree.png" Height="24"/>
                    <TextBlock Text="{Binding ProjectViewModel.EventTrees, Converter={StaticResource EventTreesToCountConverter}}"
                               Margin="4,0,4,0"
                               VerticalAlignment="Center"/>
                </StackPanel>
            </fluent:StatusBarItem>

            <fluent:StatusBarItem
                HorizontalAlignment="Right">
                <StackPanel>
                    <Label Name="ErrorIcon" VerticalAlignment="Center">
                        <Hyperlink 
                            Command="{Binding ToggleShowMessagesCommand}" 
                            Foreground="AliceBlue">
                            <TextBlock Text="{Binding Messages, Converter={StaticResource MessageListToLabelConverter}}"/>
                        </Hyperlink>
                    </Label>
                    <Popup IsOpen="{Binding ShowMessages}"
                           PlacementTarget="{Binding ElementName=ErrorIcon}"
                           AllowsTransparency="True"
                           HorizontalOffset="-250"
                           Placement="Top"
                           StaysOpen="False"
                           PopupAnimation="Slide">
                        <ListView 
                            ItemsSource="{Binding Messages}"
                            SelectionMode="Single"
                            HorizontalContentAlignment="Stretch"
                            BorderThickness="2"
                            BorderBrush="CornflowerBlue"
                            MaxHeight="500"
                            ItemTemplate="{StaticResource MessageTemplate}">
                            <ListView.ItemContainerStyle>
                                <Style TargetType="{x:Type ListViewItem}">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                <ContentPresenter />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.ItemContainerStyle>
                        </ListView>
                    </Popup>
                </StackPanel>
            </fluent:StatusBarItem>
            
            <Separator HorizontalAlignment="Right"/>

            <fluent:StatusBarItem
                x:Name="StatusBarItem"
                HorizontalAlignment="Right"
                Content="{Binding BusyIndicator}" 
                Margin="1,1,5,1"
                ContentTemplateSelector="{DynamicResource BusyIconTemplateSelector}">
                <StatusBarItem.Resources>
                    <DataTemplate x:Key="BusyIconTemplate" DataType="viewModels:StorageState">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <TextBlock Text="Bezig" Margin="4,0,4,0" VerticalAlignment="Center"/>
                            <Image Source="/StoryTree.Gui;component/Resources/busy-white.png" Style="{StaticResource Spinner}"/>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate x:Key="IdleIconTemplate" DataType="viewModels:StorageState">
                        <Image Source="/StoryTree.Gui;component/Resources/idle-white.png"/>
                    </DataTemplate>
                </StatusBarItem.Resources>
            </fluent:StatusBarItem>
            <Popup IsOpen="{Binding LastErrorMessage, Converter={StaticResource ShouldShowLastErrorConverter}}"
                   PlacementTarget="{Binding ElementName=StatusBarItem}"
                   HorizontalOffset="-290"
                   AllowsTransparency="True"
                   Placement="Top"
                   PopupAnimation="Slide">
                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource PopupErrorMessageTemplate}"/>
            </Popup>
        </fluent:StatusBar>
    </Grid>
</fluent:RibbonWindow>







